<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">

    <!-- 注入扫描 -->
    <context:component-scan base-package="com.lyr_ssh"></context:component-scan>

    <!--
     Struts2与Spring整合：由Spring创建Action和配置依赖属性
        整合步骤：
          1.将action配置到Spring容器
          2.在Struts2配置文件中（struts.xml）
                             配置常量  <constant name="struts.objectFactory" value="spring"></constant>
                             表示action对象由Spring来管理
          3.Struts2配置文件中action的class属性写为 对相应action bean的name属性
       注意：action对象的scope属性必须配置为多例 ：prototype
        action的生命周期，每一次请求都会创建一新的action对象
    -->
    <!--  userAction    action依赖service类  -->
    <bean name="userAction" class="com.lyr_ssh.web.action.UserAction" scope="prototype">
        <property name="userService" ref="userService"></property>
    </bean>
    <!--  customerAction    action依赖service类  -->
    <bean name="customerAction" class="com.lyr_ssh.web.action.CustomerAction" scope="prototype">
        <property name="cs" ref="customerService"></property>
    </bean>

    <bean name="customerService" class="com.lyr_ssh.service.impl.CustomerServiceImpl">
        <property name="customerDao" ref="customerDao"></property>
    </bean>
    <bean name="customerDao" class="com.lyr_ssh.dao.impl.CustomerDaoImpl">
        <!-- dao层依赖HibernateTemplate（通过继承HibernateDaoSupport获得，不需要手动注入） ，
             HibernateTemplate需要依赖  注入sessionFactory -->
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <!-- 配置userService
        注意UserService依赖userdao
     -->
    <bean name="userService" class="com.lyr_ssh.service.impl.UserServiceImpl">
        <property name="userdao" ref="userDao"></property>
    </bean>

    <!-- 配置userDao -->
    <bean name="userDao" class="com.lyr_ssh.dao.impl.UserDaoImpl">
        <!-- dao层依赖HibernateTemplate（通过继承HibernateDaoSupport获得，不需要手动注入） ，
             HibernateTemplate需要依赖  注入sessionFactory -->
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>


    <!--  -->
    <!--
      Hibernate与Spring整合是 ： sessionFactory交给Spring容器管理(需要导入spring-orm包)
        sessionFactory使用由Spring提供的LocalSessionFactoryBean ，选择对应的hibernate框架的LocalSessionFactoryBean的版本
     -->
    <bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!-- sessionFactory 依赖数据库连接池【连接池需要数据库连接属性】，对象关系映射文件，还有其他数据库属性
                   配置hibernate连接数据库信息
              使用properties配置注入 name="hibernateProperties"
         -->
        <property name="hibernateProperties">
            <props>
                <!-- 必须配置5 数据库连接信息由DataSource注入-->
                <!--  <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
                 <prop key="hibernate.connection.url">jdbc:mysql:///LYR_SSH</prop>
                 <prop key="hibernate.connection.username">root</prop>
                 <prop key="hibernate.connection.password">entor</prop> -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <!-- 可选配置 -->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
        <!--引入表对象映射文件 orm元数据   name：引入方式   value:写orm元数据的包，Spring自动扫描注入 -->
        <property name="mappingDirectoryLocations" value="classpath:com/lyr_ssh/entity"></property>
        <!-- 注入c3p0连接池 -->
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 指定Spring加载外部 配置文件<context:property-placeholder>：jdbc.properties -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 配置c3p0连接池 ：ComboPooledDataSource-->
    <bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 注入jdbc.properties的数据库连接属性 -->
        <property name="jdbcUrl" value="${lyr.jdbcUrl}"></property>
        <property name="driverClass" value="${lyr.driverClass}"></property>
        <property name="user" value="${lyr.user}"></property>
        <property name="password" value="${lyr.password}"></property>
    </bean>


    <!-- ==========================AOP事务============================================================================= -->
    <!-- 配置Hibernate核心事务管器HibernateTransactionManager（封装事务操作【打开，回滚，提交】）
        依赖sessionfactory
    -->
    <bean name="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <!-- 配置通知（事务） -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 配置事务属性
            以方法为单位 ,
                                      配置事务隔离级别:  isolation，
                                      事务传播属性 :    propagation，
                                      是否只读 :       read-only
         -->
        <tx:attributes>
            <tx:method name="save*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="delte*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="updata*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
            <tx:method name="get*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--植入： 将通知（事务）植入目标对象 -->
    <aop:config>
        <!-- 配置切点(指定需要植入事务的方法) -->
        <aop:pointcut expression="execution(* com.lyr_ssh.dao.impl.UserDaoImpl.*(..))" id="txPc"/>
        <!-- 配置切面 (通知+切点)-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPc"/>
    </aop:config>

    <!-- ==================================================================================== -->

</beans>