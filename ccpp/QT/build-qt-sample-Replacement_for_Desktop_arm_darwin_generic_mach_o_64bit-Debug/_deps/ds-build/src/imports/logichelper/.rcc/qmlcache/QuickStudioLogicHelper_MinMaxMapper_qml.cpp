// /QtQuick/Studio/LogicHelper/MinMaxMapper.qml
#include <QtQml/qqmlprivate.h>
#include <QtCore/qdatetime.h>
#include <QtCore/qobject.h>
#include <QtCore/qstring.h>
#include <QtCore/qstringlist.h>
#include <QtCore/qurl.h>
#include <QtCore/qvariant.h>
#include <QtQml/qjsengine.h>
#include <QtQml/qjsprimitivevalue.h>
#include <QtQml/qjsvalue.h>
#include <QtQml/qqmlcomponent.h>
#include <QtQml/qqmlcontext.h>
#include <QtQml/qqmlengine.h>
#include <QtQml/qqmllist.h>
#include <type_traits>
namespace QmlCacheGeneratedCode {
namespace _0x5f_QtQuick_Studio_LogicHelper_MinMaxMapper_qml {
extern const unsigned char qmlData alignas(16) [];
extern const unsigned char qmlData alignas(16) [] = {

0x71,0x76,0x34,0x63,0x64,0x61,0x74,0x61,
0x3b,0x0,0x0,0x0,0x1,0x5,0x6,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0xc8,0x6,0x0,0x0,0x36,0x31,0x37,0x36,
0x65,0x62,0x31,0x62,0x32,0x30,0x62,0x39,
0x33,0x34,0x66,0x34,0x39,0x37,0x66,0x62,
0x63,0x65,0x36,0x38,0x64,0x65,0x36,0x64,
0x35,0x37,0x34,0x31,0x37,0x34,0x66,0x35,
0x35,0x64,0x64,0x34,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x11,0xf4,0xa,0x88,
0x2d,0xd1,0x35,0xc3,0x39,0x50,0x1e,0x74,
0x98,0xa0,0x6a,0xe2,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x23,0x0,0x0,0x0,
0xf,0x0,0x0,0x0,0x20,0x3,0x0,0x0,
0x4,0x0,0x0,0x0,0xf8,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x8,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x8,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x8,0x1,0x0,0x0,
0x16,0x0,0x0,0x0,0x8,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x60,0x1,0x0,0x0,
0x2,0x0,0x0,0x0,0x60,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x70,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x70,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x70,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x70,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x70,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x70,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x70,0x1,0x0,0x0,
0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x50,0x5,0x0,0x0,
0x70,0x1,0x0,0x0,0xc8,0x1,0x0,0x0,
0x20,0x2,0x0,0x0,0x78,0x2,0x0,0x0,
0x33,0x0,0x0,0x0,0x40,0x0,0x0,0x0,
0x33,0x0,0x0,0x0,0xd0,0x0,0x0,0x0,
0x33,0x0,0x0,0x0,0x40,0x0,0x0,0x0,
0x33,0x0,0x0,0x0,0xe0,0x0,0x0,0x0,
0x33,0x0,0x0,0x0,0x70,0x0,0x0,0x0,
0x33,0x0,0x0,0x0,0x50,0x0,0x0,0x0,
0x33,0x0,0x0,0x0,0x70,0x0,0x0,0x0,
0x33,0x0,0x0,0x0,0xe0,0x0,0x0,0x0,
0x33,0x0,0x0,0x0,0x50,0x0,0x0,0x0,
0x33,0x0,0x0,0x0,0xd0,0x0,0x0,0x0,
0x33,0x0,0x0,0x0,0x40,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x40,0xf5,0x7f,
0x0,0x0,0x0,0x0,0x0,0x40,0xac,0x3f,
0x44,0x0,0x0,0x0,0xf,0x0,0x0,0x0,
0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x38,0x0,0x0,0x0,0x0,0x0,0x1,0x0,
0xff,0xff,0xff,0xff,0x8,0x0,0x0,0x0,
0x60,0x0,0x50,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x60,0x0,0x0,0x0,
0x1,0x0,0x0,0x0,0x2e,0x0,0x3c,0x1,
0x18,0x7,0x2e,0x2,0x3c,0x3,0x68,0x7,
0x18,0x6,0x2,0x0,0x0,0x0,0x0,0x0,
0x44,0x0,0x0,0x0,0xf,0x0,0x0,0x0,
0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x38,0x0,0x0,0x0,0x0,0x0,0x1,0x0,
0xff,0xff,0xff,0xff,0x8,0x0,0x0,0x0,
0x65,0x0,0x50,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x65,0x0,0x0,0x0,
0x1,0x0,0x0,0x0,0x2e,0x4,0x3c,0x5,
0x18,0x7,0x2e,0x6,0x3c,0x7,0x64,0x7,
0x18,0x6,0x2,0x0,0x0,0x0,0x0,0x0,
0x44,0x0,0x0,0x0,0xd,0x0,0x0,0x0,
0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x38,0x0,0x0,0x0,0x0,0x0,0x1,0x0,
0xff,0xff,0xff,0xff,0x7,0x0,0x0,0x0,
0x6b,0x0,0x50,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x6b,0x0,0x0,0x0,
0x1,0x0,0x0,0x0,0x2e,0x8,0x3c,0x9,
0x4e,0x4,0x2e,0xa,0x3c,0xb,0x18,0x6,
0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x80,0x0,0x0,0x0,0x1e,0x0,0x0,0x0,
0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x38,0x0,0x0,0x0,0x0,0x0,0x6,0x0,
0xff,0xff,0xff,0xff,0x7,0x0,0x0,0x0,
0x71,0x0,0x50,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x72,0x0,0x0,0x0,
0x2,0x0,0x0,0x0,0x6,0x0,0x0,0x0,
0x73,0x0,0x0,0x0,0x3,0x0,0x0,0x0,
0xb,0x0,0x0,0x0,0x75,0x0,0x0,0x0,
0x4,0x0,0x0,0x0,0x11,0x0,0x0,0x0,
0x76,0x0,0x0,0x0,0x5,0x0,0x0,0x0,
0x16,0x0,0x0,0x0,0x78,0x0,0x0,0x0,
0x6,0x0,0x0,0x0,0x1b,0x0,0x0,0x0,
0x79,0x0,0x0,0x0,0x6,0x0,0x0,0x0,
0x2e,0xc,0x3c,0xd,0x50,0x5,0x2e,0xe,
0x3c,0xf,0x2,0x2e,0x10,0x3c,0x11,0x50,
0x5,0x2e,0x12,0x3c,0x13,0x2,0x2e,0x14,
0x3c,0x15,0x2,0x16,0x6,0x2,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x60,0x3,0x0,0x0,0x68,0x3,0x0,0x0,
0x80,0x3,0x0,0x0,0x98,0x3,0x0,0x0,
0xb0,0x3,0x0,0x0,0xc0,0x3,0x0,0x0,
0xe0,0x3,0x0,0x0,0x20,0x4,0x0,0x0,
0x40,0x4,0x0,0x0,0x80,0x4,0x0,0x0,
0xa0,0x4,0x0,0x0,0xd8,0x4,0x0,0x0,
0xf0,0x4,0x0,0x0,0x20,0x5,0x0,0x0,
0x38,0x5,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x7,0x0,0x0,0x0,0x51,0x0,0x74,0x0,
0x51,0x0,0x75,0x0,0x69,0x0,0x63,0x0,
0x6b,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x8,0x0,0x0,0x0,0x51,0x0,0x74,0x0,
0x4f,0x0,0x62,0x0,0x6a,0x0,0x65,0x0,
0x63,0x0,0x74,0x0,0x0,0x0,0x0,0x0,
0x6,0x0,0x0,0x0,0x6f,0x0,0x62,0x0,
0x6a,0x0,0x65,0x0,0x63,0x0,0x74,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x5,0x0,0x0,0x0,0x69,0x0,0x6e,0x0,
0x70,0x0,0x75,0x0,0x74,0x0,0x0,0x0,
0xc,0x0,0x0,0x0,0x62,0x0,0x65,0x0,
0x6c,0x0,0x6f,0x0,0x77,0x0,0x4d,0x0,
0x69,0x0,0x6e,0x0,0x69,0x0,0x6d,0x0,
0x75,0x0,0x6d,0x0,0x0,0x0,0x0,0x0,
0x1b,0x0,0x0,0x0,0x65,0x0,0x78,0x0,
0x70,0x0,0x72,0x0,0x65,0x0,0x73,0x0,
0x73,0x0,0x69,0x0,0x6f,0x0,0x6e,0x0,
0x20,0x0,0x66,0x0,0x6f,0x0,0x72,0x0,
0x20,0x0,0x62,0x0,0x65,0x0,0x6c,0x0,
0x6f,0x0,0x77,0x0,0x4d,0x0,0x69,0x0,
0x6e,0x0,0x69,0x0,0x6d,0x0,0x75,0x0,
0x6d,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0xc,0x0,0x0,0x0,0x61,0x0,0x62,0x0,
0x6f,0x0,0x76,0x0,0x65,0x0,0x4d,0x0,
0x61,0x0,0x78,0x0,0x69,0x0,0x6d,0x0,
0x75,0x0,0x6d,0x0,0x0,0x0,0x0,0x0,
0x1b,0x0,0x0,0x0,0x65,0x0,0x78,0x0,
0x70,0x0,0x72,0x0,0x65,0x0,0x73,0x0,
0x73,0x0,0x69,0x0,0x6f,0x0,0x6e,0x0,
0x20,0x0,0x66,0x0,0x6f,0x0,0x72,0x0,
0x20,0x0,0x61,0x0,0x62,0x0,0x6f,0x0,
0x76,0x0,0x65,0x0,0x4d,0x0,0x61,0x0,
0x78,0x0,0x69,0x0,0x6d,0x0,0x75,0x0,
0x6d,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0xa,0x0,0x0,0x0,0x6f,0x0,0x75,0x0,
0x74,0x0,0x4f,0x0,0x66,0x0,0x52,0x0,
0x61,0x0,0x6e,0x0,0x67,0x0,0x65,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x19,0x0,0x0,0x0,0x65,0x0,0x78,0x0,
0x70,0x0,0x72,0x0,0x65,0x0,0x73,0x0,
0x73,0x0,0x69,0x0,0x6f,0x0,0x6e,0x0,
0x20,0x0,0x66,0x0,0x6f,0x0,0x72,0x0,
0x20,0x0,0x6f,0x0,0x75,0x0,0x74,0x0,
0x4f,0x0,0x66,0x0,0x52,0x0,0x61,0x0,
0x6e,0x0,0x67,0x0,0x65,0x0,0x0,0x0,
0x6,0x0,0x0,0x0,0x6f,0x0,0x75,0x0,
0x74,0x0,0x70,0x0,0x75,0x0,0x74,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x15,0x0,0x0,0x0,0x65,0x0,0x78,0x0,
0x70,0x0,0x72,0x0,0x65,0x0,0x73,0x0,
0x73,0x0,0x69,0x0,0x6f,0x0,0x6e,0x0,
0x20,0x0,0x66,0x0,0x6f,0x0,0x72,0x0,
0x20,0x0,0x6f,0x0,0x75,0x0,0x74,0x0,
0x70,0x0,0x75,0x0,0x74,0x0,0x0,0x0,
0x7,0x0,0x0,0x0,0x6d,0x0,0x69,0x0,
0x6e,0x0,0x69,0x0,0x6d,0x0,0x75,0x0,
0x6d,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x7,0x0,0x0,0x0,0x6d,0x0,0x61,0x0,
0x78,0x0,0x69,0x0,0x6d,0x0,0x75,0x0,
0x6d,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x0,0x0,0x0,0x10,0x0,0x0,0x0,
0x1,0x0,0x0,0x0,0x24,0x0,0x0,0x0,
0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x1e,0x0,0x10,0x0,
0xa,0x2,0x0,0x0,0x28,0x0,0x0,0x0,
0x2,0x0,0x0,0x0,0x3,0x0,0x0,0x0,
0x0,0x0,0xff,0xff,0xff,0xff,0xff,0xff,
0x0,0x0,0x7,0x0,0x54,0x0,0x0,0x0,
0x54,0x0,0x0,0x0,0xa8,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0xa8,0x0,0x0,0x0,
0xa8,0x0,0x0,0x0,0x0,0x0,0x7,0x0,
0xa8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x50,0x1,0x0,0x0,0x55,0x0,0x10,0x0,
0x56,0x0,0x50,0x0,0x50,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x50,0x1,0x0,0x0,
0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,
0x3,0x0,0x0,0x20,0x5b,0x0,0x50,0x0,
0x5,0x0,0x0,0x0,0x2,0x0,0x0,0x20,
0x60,0x0,0x50,0x0,0x7,0x0,0x0,0x0,
0x2,0x0,0x0,0x20,0x65,0x0,0x50,0x0,
0x9,0x0,0x0,0x0,0x2,0x0,0x0,0x20,
0x6b,0x0,0x50,0x0,0xb,0x0,0x0,0x0,
0x3,0x0,0x0,0x20,0x71,0x0,0x50,0x0,
0xd,0x0,0x0,0x0,0x3,0x0,0x0,0x20,
0x7e,0x0,0x50,0x0,0xe,0x0,0x0,0x0,
0x3,0x0,0x0,0x20,0x83,0x0,0x50,0x0,
0xe,0x0,0x0,0x0,0x0,0x0,0x2,0x0,
0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x83,0x0,0x30,0x1,0x83,0x0,0xc0,0x1,
0xd,0x0,0x0,0x0,0x0,0x0,0x2,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x7e,0x0,0x30,0x1,0x7e,0x0,0xc0,0x1,
0xb,0x0,0x0,0x0,0x0,0x0,0x7,0x0,
0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x71,0x0,0x30,0x1,0x71,0x0,0xb0,0x1,
0x9,0x0,0x0,0x0,0x0,0x0,0x7,0x0,
0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x6b,0x0,0x30,0x1,0x6b,0x0,0xf0,0x1,
0x7,0x0,0x0,0x0,0x0,0x0,0x7,0x0,
0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x65,0x0,0x30,0x1,0x65,0x0,0x10,0x2,
0x5,0x0,0x0,0x0,0x0,0x0,0x7,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x60,0x0,0x30,0x1,0x60,0x0,0x10,0x2,
0x4,0x0,0x0,0x0,0x0,0x0,0x2,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x5b,0x0,0x30,0x1,0x5b,0x0,0xa0,0x1
};
QT_WARNING_PUSH
QT_WARNING_DISABLE_MSVC(4573)

template <typename Binding>
void wrapCall(const QQmlPrivate::AOTCompiledContext *aotContext, void *dataPtr, void **argumentsPtr, Binding &&binding)
{
    using return_type = std::invoke_result_t<Binding, const QQmlPrivate::AOTCompiledContext *, void **>;
    if constexpr (std::is_same_v<return_type, void>) {
       Q_UNUSED(dataPtr)
       binding(aotContext, argumentsPtr);
    } else {
        if (dataPtr) {
           new (dataPtr) return_type(binding(aotContext, argumentsPtr));
        } else {
           binding(aotContext, argumentsPtr);
        }
    }
}
extern const QQmlPrivate::TypedFunction aotBuiltFunctions[];
extern const QQmlPrivate::TypedFunction aotBuiltFunctions[] = {
{ 0, QMetaType::fromType<bool>(), {  }, 
    [](const QQmlPrivate::AOTCompiledContext *aotContext, void *dataPtr, void **argumentsPtr) {
        wrapCall(aotContext, dataPtr, argumentsPtr, [](const QQmlPrivate::AOTCompiledContext *aotContext, void **argumentsPtr) {
Q_UNUSED(aotContext)
Q_UNUSED(argumentsPtr)
// expression for belowMinimum at line 96, column 5
double r7_1;
double r2_2;
QObject *r2_1;
bool r2_3;
// generate_LoadQmlContextPropertyLookup
while (!aotContext->loadContextIdLookup(0, &r2_1)) {
aotContext->setInstructionPointer(2);
aotContext->initLoadContextIdLookup(0);
if (aotContext->engine->hasError())
    return bool();
}
// generate_GetLookup
while (!aotContext->getObjectLookup(1, r2_1, &r2_2)) {
aotContext->setInstructionPointer(4);
aotContext->initGetObjectLookup(1, r2_1, QMetaType::fromType<double>());
if (aotContext->engine->hasError())
    return bool();
}
// generate_StoreReg
r7_1 = r2_2;
// generate_LoadQmlContextPropertyLookup
while (!aotContext->loadContextIdLookup(2, &r2_1)) {
aotContext->setInstructionPointer(8);
aotContext->initLoadContextIdLookup(2);
if (aotContext->engine->hasError())
    return bool();
}
// generate_GetLookup
while (!aotContext->getObjectLookup(3, r2_1, &r2_2)) {
aotContext->setInstructionPointer(10);
aotContext->initGetObjectLookup(3, r2_1, QMetaType::fromType<double>());
if (aotContext->engine->hasError())
    return bool();
}
// generate_CmpLt
r2_3 = r7_1 < r2_2;
// generate_Ret
return r2_3;
});}
 },{ 1, QMetaType::fromType<bool>(), {  }, 
    [](const QQmlPrivate::AOTCompiledContext *aotContext, void *dataPtr, void **argumentsPtr) {
        wrapCall(aotContext, dataPtr, argumentsPtr, [](const QQmlPrivate::AOTCompiledContext *aotContext, void **argumentsPtr) {
Q_UNUSED(aotContext)
Q_UNUSED(argumentsPtr)
// expression for aboveMaximum at line 101, column 5
double r7_1;
QObject *r2_1;
double r2_2;
bool r2_3;
// generate_LoadQmlContextPropertyLookup
while (!aotContext->loadContextIdLookup(4, &r2_1)) {
aotContext->setInstructionPointer(2);
aotContext->initLoadContextIdLookup(4);
if (aotContext->engine->hasError())
    return bool();
}
// generate_GetLookup
while (!aotContext->getObjectLookup(5, r2_1, &r2_2)) {
aotContext->setInstructionPointer(4);
aotContext->initGetObjectLookup(5, r2_1, QMetaType::fromType<double>());
if (aotContext->engine->hasError())
    return bool();
}
// generate_StoreReg
r7_1 = r2_2;
// generate_LoadQmlContextPropertyLookup
while (!aotContext->loadContextIdLookup(6, &r2_1)) {
aotContext->setInstructionPointer(8);
aotContext->initLoadContextIdLookup(6);
if (aotContext->engine->hasError())
    return bool();
}
// generate_GetLookup
while (!aotContext->getObjectLookup(7, r2_1, &r2_2)) {
aotContext->setInstructionPointer(10);
aotContext->initGetObjectLookup(7, r2_1, QMetaType::fromType<double>());
if (aotContext->engine->hasError())
    return bool();
}
// generate_CmpGt
r2_3 = r7_1 > r2_2;
// generate_Ret
return r2_3;
});}
 },{ 2, QMetaType::fromType<bool>(), {  }, 
    [](const QQmlPrivate::AOTCompiledContext *aotContext, void *dataPtr, void **argumentsPtr) {
        wrapCall(aotContext, dataPtr, argumentsPtr, [](const QQmlPrivate::AOTCompiledContext *aotContext, void **argumentsPtr) {
Q_UNUSED(aotContext)
Q_UNUSED(argumentsPtr)
// expression for outOfRange at line 107, column 5
bool r2_2;
QObject *r2_1;
// generate_LoadQmlContextPropertyLookup
while (!aotContext->loadContextIdLookup(8, &r2_1)) {
aotContext->setInstructionPointer(2);
aotContext->initLoadContextIdLookup(8);
if (aotContext->engine->hasError())
    return bool();
}
// generate_GetLookup
while (!aotContext->getObjectLookup(9, r2_1, &r2_2)) {
aotContext->setInstructionPointer(4);
aotContext->initGetObjectLookup(9, r2_1, QMetaType::fromType<bool>());
if (aotContext->engine->hasError())
    return bool();
}
// generate_JumpTrue
if (r2_2) {
    goto label_0;
}
;
// generate_LoadQmlContextPropertyLookup
while (!aotContext->loadContextIdLookup(10, &r2_1)) {
aotContext->setInstructionPointer(8);
aotContext->initLoadContextIdLookup(10);
if (aotContext->engine->hasError())
    return bool();
}
// generate_GetLookup
while (!aotContext->getObjectLookup(11, r2_1, &r2_2)) {
aotContext->setInstructionPointer(10);
aotContext->initGetObjectLookup(11, r2_1, QMetaType::fromType<bool>());
if (aotContext->engine->hasError())
    return bool();
}
label_0:;
// generate_Ret
return r2_2;
});}
 },{ 3, QMetaType::fromType<double>(), {  }, 
    [](const QQmlPrivate::AOTCompiledContext *aotContext, void *dataPtr, void **argumentsPtr) {
        wrapCall(aotContext, dataPtr, argumentsPtr, [](const QQmlPrivate::AOTCompiledContext *aotContext, void **argumentsPtr) {
Q_UNUSED(aotContext)
Q_UNUSED(argumentsPtr)
// expression for output at line 113, column 5
QObject *r2_1;
bool r2_2;
double r2_3;
// generate_LoadQmlContextPropertyLookup
while (!aotContext->loadContextIdLookup(12, &r2_1)) {
aotContext->setInstructionPointer(2);
aotContext->initLoadContextIdLookup(12);
if (aotContext->engine->hasError())
    return double();
}
// generate_GetLookup
while (!aotContext->getObjectLookup(13, r2_1, &r2_2)) {
aotContext->setInstructionPointer(4);
aotContext->initGetObjectLookup(13, r2_1, QMetaType::fromType<bool>());
if (aotContext->engine->hasError())
    return double();
}
// generate_JumpFalse
if (!r2_2) {
    goto label_0;
}
;
// generate_LoadQmlContextPropertyLookup
while (!aotContext->loadContextIdLookup(14, &r2_1)) {
aotContext->setInstructionPointer(8);
aotContext->initLoadContextIdLookup(14);
if (aotContext->engine->hasError())
    return double();
}
// generate_GetLookup
while (!aotContext->getObjectLookup(15, r2_1, &r2_3)) {
aotContext->setInstructionPointer(10);
aotContext->initGetObjectLookup(15, r2_1, QMetaType::fromType<double>());
if (aotContext->engine->hasError())
    return double();
}
// generate_Ret
return r2_3;
label_0:;
// generate_LoadQmlContextPropertyLookup
while (!aotContext->loadContextIdLookup(16, &r2_1)) {
aotContext->setInstructionPointer(13);
aotContext->initLoadContextIdLookup(16);
if (aotContext->engine->hasError())
    return double();
}
// generate_GetLookup
while (!aotContext->getObjectLookup(17, r2_1, &r2_2)) {
aotContext->setInstructionPointer(15);
aotContext->initGetObjectLookup(17, r2_1, QMetaType::fromType<bool>());
if (aotContext->engine->hasError())
    return double();
}
// generate_JumpFalse
if (!r2_2) {
    goto label_1;
}
;
// generate_LoadQmlContextPropertyLookup
while (!aotContext->loadContextIdLookup(18, &r2_1)) {
aotContext->setInstructionPointer(19);
aotContext->initLoadContextIdLookup(18);
if (aotContext->engine->hasError())
    return double();
}
// generate_GetLookup
while (!aotContext->getObjectLookup(19, r2_1, &r2_3)) {
aotContext->setInstructionPointer(21);
aotContext->initGetObjectLookup(19, r2_1, QMetaType::fromType<double>());
if (aotContext->engine->hasError())
    return double();
}
// generate_Ret
return r2_3;
label_1:;
// generate_LoadQmlContextPropertyLookup
while (!aotContext->loadContextIdLookup(20, &r2_1)) {
aotContext->setInstructionPointer(24);
aotContext->initLoadContextIdLookup(20);
if (aotContext->engine->hasError())
    return double();
}
// generate_GetLookup
while (!aotContext->getObjectLookup(21, r2_1, &r2_3)) {
aotContext->setInstructionPointer(26);
aotContext->initGetObjectLookup(21, r2_1, QMetaType::fromType<double>());
if (aotContext->engine->hasError())
    return double();
}
// generate_Ret
return r2_3;
});}
 },{ 0, QMetaType::fromType<void>(), {}, nullptr }};
QT_WARNING_POP
}
}
